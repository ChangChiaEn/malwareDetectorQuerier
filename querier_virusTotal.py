import requests
import os
import time

class VirusTotalAPIv3:
    def __init__(self, api_key):
        self.api_key = api_key
        self.headers = {
            "x-apikey": self.api_key
        }
        self.upload_url = "https://www.virustotal.com/api/v3/files"

    def scan_file(self, file_path):
        # Check if the file exists at the given path.
        if not os.path.exists(file_path):
            return "File does not exist."

        # Open the file in binary read mode and send it to VirusTotal for scanning.
        with open(file_path, 'rb') as file:
            files = {'file': (os.path.basename(file_path), file)}
            response = requests.post(self.upload_url, headers=self.headers, files=files)

        # If the HTTP request was successful, return the JSON response.
        if response.status_code == 200:
            result = response.json()
            return result
        else:
            # If the request failed, return an error message with the status code.
            return f"Error with file scan request: {response.status_code} - {response.text}"

    def get_report(self, file_id):
        # Construct the URL for getting the scanning report using the file ID.
        report_url = f"https://www.virustotal.com/api/v3/analyses/{file_id}"
        # Make a GET request to retrieve the report.
        response = requests.get(report_url, headers=self.headers)

        # If the HTTP request was successful, return the JSON response.
        if response.status_code == 200:
            result = response.json()
            return result
        else:
            # If the request failed, return an error message with the status code.
            return f"Error with file report request: {response.status_code} - {response.text}"

    def get_detections_score(self, analysis_results):
        # Extract the statistics from the analysis results.
        stats = analysis_results.get('data', {}).get('attributes', {}).get('stats', {})
        # Get the number of malicious detections.
        total_detections = stats.get('malicious', 0)
        # Calculate the total number of engines that analyzed the file.
        total_engines = stats.get('harmless', 0) + total_detections

        # Calculate the detection score as a decimal number.
        if total_engines > 0:
            return total_detections / total_engines
        else:
            # Return 0 if no engines processed the file or if no data is available.
            return 0

if __name__ == "__main__":
    # Replace with your actual VirusTotal API key.
    api_key = 'Enter your API key'
    # Create an instance of the VirusTotalAPIv3 class.
    vt_api = VirusTotalAPIv3(api_key)

    # Ask the user to enter the file path to scan.
    file_path = input("Enter the file path to scan: ")
    # Scan the file and get the result.
    scan_result = vt_api.scan_file(file_path)
    
    # Check if the scan result is a dictionary and contains a file ID.
    if isinstance(scan_result, dict) and scan_result.get('data', {}).get('id'):
        file_id = scan_result['data']['id']
        print(f"File has been submitted for scanning. The file ID is {file_id}. Waiting for report...")
        
        # Wait for the report to be ready.
        report_ready = False
        while not report_ready:
            # Get the report using the file ID.
            report = vt_api.get_report(file_id)
            # Check if the report status is 'completed'.
            if report.get('data', {}).get('attributes', {}).get('status') == 'completed':
                report_ready = True
            else:
                # If the report is not ready, wait for 30 seconds before checking again.
                print("Report not ready yet. Waiting...")
                time.sleep(30)
        
        # Calculate the detection score from the report.
        score = vt_api.get_detections_score(report)
        print(f"Detection Score: {score}")
    else:
        print("Error or file not found.")
