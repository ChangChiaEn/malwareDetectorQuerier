import requests

class MetaDefenderQuerier:
    def __init__(self, api_key):
        self.base_url = "https://api.metadefender.com/v4/"
        self.api_key = api_key

    def scan_file(self, file_path):
        """
        Upload and scan a file.
        """
        headers = {
            "apikey": self.api_key
        }
        
        with open(file_path, 'rb') as file:
            files = {'file': file}
            response = requests.post(self.base_url + "file", headers=headers, files=files)
            return response.json()

    def get_scan_result(self, data_id):
        """
        Retrieve the scan result for a specific file using the provided method from the website.
        """
        url = f"https://api.metadefender.com/v4/file/{data_id}"
        headers = {
            "apikey": self.api_key,
        }
        response = requests.get(url, headers=headers)
        return response.json()

# Usage
api_key = "4703eb656b02a53fd4037a6e1cfa98c9"  # Replace with your API key
querier = MetaDefenderQuerier(api_key)

# Prompt the user to input the file path
file_path = input("Please enter the path to your file: ")

# Upload the file and get the data_id
scan_response = querier.scan_file(file_path)
print("Scan Response:", scan_response)  # Print the full scan response

data_id = scan_response.get('data_id')

# Use the data_id to get the scan result using the provided method from the website
if data_id:
    result = querier.get_scan_result(data_id)
    print(result)
else:
    print("Failed to get data_id from the scan response.")

def convert_json_to_score(json_data):
    """
    Convert the provided JSON data from a malware scan to a score between 0 and 1.

    Input:
        json_data: The JSON data from the malware scan.

    Returns:
        A score between 0 and 1.
    """

    # Extract relevant data from the JSON
    progress_percentage = json_data.get('scan_results', {}).get('progress_percentage', 0)
    scan_result = json_data.get('scan_results', {}).get('scan_all_result_a', '')

    # If the scan is still in progress, return the progress as a fraction of 1
    if scan_result == 'In Progress':
        return progress_percentage / 100

    # If the scan is complete but no threats were found, return 0
    elif scan_result == 'Clean':
        return 0

    # If the scan is complete and threats were found, return 1
    elif scan_result == 'Infected':
        return 1

    # For any other result, return a default value (e.g., 0.5 to indicate uncertainty)
    else:
        return 0.5

# Test the function
json_data = {
    'scan_result_history_length': 92,
    # ... (rest of the JSON data)
    'stored': True
}

score = convert_json_to_score(json_data)
print(score)
